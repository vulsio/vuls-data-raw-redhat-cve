{
	"name": "CVE-2024-42152",
	"threat_severity": "Moderate",
	"public_date": "2024-07-30T00:00:00Z",
	"bugzilla": {
		"description": "kernel: nvmet: fix a possible leak when destroy a ctrl during qp establishment",
		"id": "2301519",
		"url": "https://bugzilla.redhat.com/show_bug.cgi?id=2301519"
	},
	"cvss3": {
		"cvss3_base_score": "5.5",
		"cvss3_scoring_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
		"status": "draft"
	},
	"details": [
		"In the Linux kernel, the following vulnerability has been resolved:\nnvmet: fix a possible leak when destroy a ctrl during qp establishment\nIn nvmet_sq_destroy we capture sq->ctrl early and if it is non-NULL we\nknow that a ctrl was allocated (in the admin connect request handler)\nand we need to release pending AERs, clear ctrl->sqs and sq->ctrl\n(for nvme-loop primarily), and drop the final reference on the ctrl.\nHowever, a small window is possible where nvmet_sq_destroy starts (as\na result of the client giving up and disconnecting) concurrently with\nthe nvme admin connect cmd (which may be in an early stage). But *before*\nkill_and_confirm of sq->ref (i.e. the admin connect managed to get an sq\nlive reference). In this case, sq->ctrl was allocated however after it was\ncaptured in a local variable in nvmet_sq_destroy.\nThis prevented the final reference drop on the ctrl.\nSolve this by re-capturing the sq->ctrl after all inflight request has\ncompleted, where for sure sq->ctrl reference is final, and move forward\nbased on that.\nThis issue was observed in an environment with many hosts connecting\nmultiple ctrls simoutanuosly, creating a delay in allocating a ctrl\nleading up to this race window."
	],
	"references": [
		"https://www.cve.org/CVERecord?id=CVE-2024-42152\nhttps://nvd.nist.gov/vuln/detail/CVE-2024-42152\nhttps://lore.kernel.org/linux-cve-announce/2024073034-CVE-2024-42152-c248@gregkh/T"
	],
	"upstream_fix": "kernel 5.10.222, kernel 5.15.163, kernel 6.1.98, kernel 6.6.39, kernel 6.9.9, kernel 6.10",
	"csaw": false
}
