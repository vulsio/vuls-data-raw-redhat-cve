{
	"name": "CVE-2024-54680",
	"threat_severity": "Moderate",
	"public_date": "2025-01-11T00:00:00Z",
	"bugzilla": {
		"description": "kernel: smb: client: fix TCP timers deadlock after rmmod",
		"id": "2337118",
		"url": "https://bugzilla.redhat.com/show_bug.cgi?id=2337118"
	},
	"cvss3": {
		"cvss3_base_score": "4.4",
		"cvss3_scoring_vector": "CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:N/I:N/A:H",
		"status": "draft"
	},
	"cwe": "CWE-667",
	"details": [
		"In the Linux kernel, the following vulnerability has been resolved:\nsmb: client: fix TCP timers deadlock after rmmod\nCommit ef7134c7fc48 (\"smb: client: Fix use-after-free of network namespace.\")\nfixed a netns UAF by manually enabled socket refcounting\n(sk->sk_net_refcnt=1 and sock_inuse_add(net, 1)).\nThe reason the patch worked for that bug was because we now hold\nreferences to the netns (get_net_track() gets a ref internally)\nand they're properly released (internally, on __sk_destruct()),\nbut only because sk->sk_net_refcnt was set.\nProblem:\n(this happens regardless of CONFIG_NET_NS_REFCNT_TRACKER and regardless\nif init_net or other)\nSetting sk->sk_net_refcnt=1 *manually* and *after* socket creation is not\nonly out of cifs scope, but also technically wrong -- it's set conditionally\nbased on user (=1) vs kernel (=0) sockets.  And net/ implementations\nseem to base their user vs kernel space operations on it.\ne.g. upon TCP socket close, the TCP timers are not cleared because\nsk->sk_net_refcnt=1:\n(cf. commit 151c9c724d05 (\"tcp: properly terminate timers for kernel sockets\"))\nnet/ipv4/tcp.c:\nvoid tcp_close(struct sock *sk, long timeout)\n{\nlock_sock(sk);\n__tcp_close(sk, timeout);\nrelease_sock(sk);\nif (!sk->sk_net_refcnt)\ninet_csk_clear_xmit_timers_sync(sk);\nsock_put(sk);\n}\nWhich will throw a lockdep warning and then, as expected, deadlock on\ntcp_write_timer().\nA way to reproduce this is by running the reproducer from ef7134c7fc48\nand then 'rmmod cifs'.  A few seconds later, the deadlock/lockdep\nwarning shows up.\nFix:\nWe shouldn't mess with socket internals ourselves, so do not set\nsk_net_refcnt manually.\nAlso change __sock_create() to sock_create_kern() for explicitness.\nAs for non-init_net network namespaces, we deal with it the best way\nwe can -- hold an extra netns reference for server->ssocket and drop it\nwhen it's released.  This ensures that the netns still exists whenever\nwe need to create/destroy server->ssocket, but is not directly tied to\nit."
	],
	"references": [
		"https://www.cve.org/CVERecord?id=CVE-2024-54680\nhttps://nvd.nist.gov/vuln/detail/CVE-2024-54680\nhttps://lore.kernel.org/linux-cve-announce/2025011145-CVE-2024-54680-db98@gregkh/T"
	],
	"package_state": [
		{
			"cpe": "cpe:/o:redhat:enterprise_linux:6",
			"fix_state": "Not affected",
			"package_name": "kernel",
			"product_name": "Red Hat Enterprise Linux 6"
		},
		{
			"cpe": "cpe:/o:redhat:enterprise_linux:7",
			"fix_state": "Not affected",
			"package_name": "kernel",
			"product_name": "Red Hat Enterprise Linux 7"
		},
		{
			"cpe": "cpe:/o:redhat:enterprise_linux:7",
			"fix_state": "Not affected",
			"package_name": "kernel-rt",
			"product_name": "Red Hat Enterprise Linux 7"
		},
		{
			"cpe": "cpe:/o:redhat:enterprise_linux:8",
			"fix_state": "Not affected",
			"package_name": "kernel",
			"product_name": "Red Hat Enterprise Linux 8"
		},
		{
			"cpe": "cpe:/o:redhat:enterprise_linux:8",
			"fix_state": "Not affected",
			"package_name": "kernel-rt",
			"product_name": "Red Hat Enterprise Linux 8"
		},
		{
			"cpe": "cpe:/o:redhat:enterprise_linux:9",
			"fix_state": "Affected",
			"package_name": "kernel",
			"product_name": "Red Hat Enterprise Linux 9"
		},
		{
			"cpe": "cpe:/o:redhat:enterprise_linux:9",
			"fix_state": "Affected",
			"package_name": "kernel-rt",
			"product_name": "Red Hat Enterprise Linux 9"
		}
	],
	"csaw": false
}
